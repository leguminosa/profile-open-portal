// Code generated by MockGen. DO NOT EDIT.
// Source: tools/tools.go

// Package tools is a generated GoMock package.
package tools

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashInterface is a mock of HashInterface interface.
type MockHashInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHashInterfaceMockRecorder
}

// MockHashInterfaceMockRecorder is the mock recorder for MockHashInterface.
type MockHashInterfaceMockRecorder struct {
	mock *MockHashInterface
}

// NewMockHashInterface creates a new mock instance.
func NewMockHashInterface(ctrl *gomock.Controller) *MockHashInterface {
	mock := &MockHashInterface{ctrl: ctrl}
	mock.recorder = &MockHashInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashInterface) EXPECT() *MockHashInterfaceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHashInterface) ComparePassword(hashedPassword []byte, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHashInterfaceMockRecorder) ComparePassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHashInterface)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockHashInterface) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashInterfaceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashInterface)(nil).HashPassword), password)
}

// MockJWTInterface is a mock of JWTInterface interface.
type MockJWTInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTInterfaceMockRecorder
}

// MockJWTInterfaceMockRecorder is the mock recorder for MockJWTInterface.
type MockJWTInterfaceMockRecorder struct {
	mock *MockJWTInterface
}

// NewMockJWTInterface creates a new mock instance.
func NewMockJWTInterface(ctrl *gomock.Controller) *MockJWTInterface {
	mock := &MockJWTInterface{ctrl: ctrl}
	mock.recorder = &MockJWTInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTInterface) EXPECT() *MockJWTInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockJWTInterface) Generate(content interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockJWTInterfaceMockRecorder) Generate(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockJWTInterface)(nil).Generate), content)
}

// Validate mocks base method.
func (m *MockJWTInterface) Validate(tokenString string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tokenString)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockJWTInterfaceMockRecorder) Validate(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockJWTInterface)(nil).Validate), tokenString)
}
